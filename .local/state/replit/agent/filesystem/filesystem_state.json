{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WhatsApp Campaign Manager\n\n## Overview\n\nThis is a full-stack WhatsApp automation application that enables users to create and manage bulk messaging campaigns. The system provides a web-based dashboard for connecting WhatsApp sessions, importing contacts from Excel files, creating message campaigns with template variables, and monitoring campaign progress in real-time. Built with a modern React frontend and Express.js backend, it integrates with the WPPConnect library for WhatsApp automation and uses PostgreSQL for data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 2025)\n\n- **Migration Complete**: Successfully migrated project from Replit Agent to Replit environment\n- **Excel Processing Update**: Modified to read company names from column B and phone numbers from column F (specific column positions)  \n- **Phone Number Handling**: Enhanced Brazilian phone number cleaning to handle formats like \"(11) 99761-3946\"\n- **Save Draft Feature**: Fixed save draft button functionality with proper validation\n- **UI Simplification**: Hidden message interval and scheduling options (defaults: 5 seconds between messages, immediate sending)\n- **Backend Fixes**: Resolved string-to-number conversion issues for messageInterval field\n- **SQLite Migration**: Converted from in-memory storage to SQLite database for persistent data storage\n- **Navigation Menu**: Added functional navigation menu with Contacts section to view all imported contacts\n- **Draft Campaigns**: Fixed draft campaigns to appear in active campaigns list for better visibility\n- **Contacts Table Optimization**: Removed custom fields column to fix layout issues with strange characters\n- **Campaign Filtering**: Added campaign filter dropdown in contacts table for better organization\n- **Start Campaign Button**: Added prominent \"Iniciar Campanha\" button for draft campaigns with proper styling\n- **Text Localization**: Changed \"draft\" to \"rascunho\" throughout the application for Portuguese consistency\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom WhatsApp-themed color palette\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation\n- **Real-time Updates**: WebSocket client for live campaign monitoring\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with real-time WebSocket support\n- **File Processing**: Multer for Excel file uploads with XLSX parsing\n- **WhatsApp Integration**: WPPConnect library for browser automation\n- **Session Management**: In-memory storage with option for database persistence\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM\n- **Schema Design**: \n  - WhatsApp sessions table for connection management\n  - Campaigns table for message campaign configuration\n  - Contacts table with custom field support for template variables\n  - Activity logs table for audit trail and real-time monitoring\n- **Migration System**: Drizzle Kit for schema management\n- **Connection**: Neon Database serverless PostgreSQL\n\n### Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Session Management**: Basic session tracking for WhatsApp connections\n- **Access Control**: Open access to all endpoints\n\n### External Service Integrations\n- **WhatsApp Web**: Browser automation via WPPConnect\n- **File Processing**: Server-side Excel parsing and validation\n- **Real-time Communication**: WebSocket server for live updates\n- **Development Tools**: Vite for frontend build system with HMR\n\n### Key Design Patterns\n- **Component Architecture**: Reusable UI components with consistent design system\n- **Data Flow**: Unidirectional data flow with React Query for caching and synchronization\n- **Error Handling**: Centralized error management with toast notifications\n- **Real-time Updates**: Event-driven architecture with WebSocket broadcasting\n- **File Upload**: Multi-part form data handling with validation and progress tracking\n- **Campaign Management**: State machine pattern for campaign lifecycle (draft, active, paused, completed)\n\n### Development and Deployment\n- **Build System**: Vite for frontend, esbuild for backend compilation\n- **Development**: Hot module replacement and TypeScript checking\n- **Environment**: Replit-optimized with development banner integration\n- **Package Management**: npm with lockfile for dependency consistency","size_bytes":4754},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 3000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { whatsappService } from \"./services/whatsapp\";\nimport { ExcelService } from \"./services/excel\";\nimport { insertCampaignSchema, insertContactSchema, insertActivityLogSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    console.log('WebSocket client connected');\n\n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('WebSocket client disconnected');\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n\n  // Broadcast function for real-time updates\n  const broadcast = (data: any) => {\n    const message = JSON.stringify(data);\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  };\n\n  // Setup WhatsApp service event listeners\n  whatsappService.on('connected', (data) => {\n    storage.updateWhatsappSession(data.sessionName, { \n      status: 'connected',\n      lastActivity: new Date().toISOString() \n    });\n    broadcast({ type: 'whatsapp_connected', data });\n    storage.createActivityLog({\n      type: 'connection',\n      message: 'WhatsApp conectado com sucesso',\n      metadata: data\n    });\n  });\n\n  whatsappService.on('disconnected', (data) => {\n    storage.updateWhatsappSession(data.sessionName, { \n      status: 'disconnected' \n    });\n    broadcast({ type: 'whatsapp_disconnected', data });\n    storage.createActivityLog({\n      type: 'connection',\n      message: 'WhatsApp desconectado',\n      metadata: data\n    });\n  });\n\n  whatsappService.on('qrcode', (data) => {\n    broadcast({ type: 'qrcode', data });\n  });\n\n  whatsappService.on('messageSent', async (data) => {\n    broadcast({ type: 'message_sent', data });\n    await storage.createActivityLog({\n      type: 'message_sent',\n      message: `Mensagem enviada para ${data.to}`,\n      metadata: data\n    });\n  });\n\n  whatsappService.on('messageError', async (data) => {\n    broadcast({ type: 'message_error', data });\n    await storage.createActivityLog({\n      type: 'message_failed',\n      message: `Erro ao enviar mensagem para ${data.to}: ${data.error}`,\n      metadata: data\n    });\n  });\n\n  // WhatsApp Connection Routes\n  app.get(\"/api/whatsapp/status\", async (req, res) => {\n    try {\n      const status = await whatsappService.getStatus();\n      const session = await storage.getWhatsappSession('session_001');\n      \n      res.json({\n        ...status,\n        session: session || null\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/whatsapp/connect\", async (req, res) => {\n    try {\n      if (whatsappService.isConnected()) {\n        return res.status(400).json({ message: \"WhatsApp já está conectado\" });\n      }\n\n      // Create or update session record\n      let session = await storage.getWhatsappSession('session_001');\n      if (!session) {\n        session = await storage.createWhatsappSession({\n          sessionName: 'session_001',\n          status: 'connecting'\n        });\n      } else {\n        session = await storage.updateWhatsappSession('session_001', {\n          status: 'connecting'\n        }) || session;\n      }\n\n      // Start connection process\n      whatsappService.connect();\n\n      res.json({ message: \"Processo de conexão iniciado\", session });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/whatsapp/disconnect\", async (req, res) => {\n    try {\n      await whatsappService.disconnect();\n      await storage.updateWhatsappSession('session_001', {\n        status: 'disconnected'\n      });\n\n      res.json({ message: \"WhatsApp desconectado com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Campaign Routes\n  app.get(\"/api/campaigns\", async (req, res) => {\n    try {\n      const campaigns = await storage.getAllCampaigns();\n      res.json(campaigns);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/campaigns/active\", async (req, res) => {\n    try {\n      // Get all campaigns (including drafts) to display in the dashboard\n      const campaigns = await storage.getAllCampaigns();\n      const campaignsWithProgress = await Promise.all(\n        campaigns.map(async (campaign) => {\n          const contacts = await storage.getContactsByCampaign(campaign.id);\n          return {\n            ...campaign,\n            contacts: contacts.length,\n            progress: contacts.length > 0 ? (campaign.sentCount / contacts.length) * 100 : 0\n          };\n        })\n      );\n      res.json(campaignsWithProgress);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get all contacts with campaign information\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const campaigns = await storage.getAllCampaigns();\n      const allContacts = [];\n      \n      for (const campaign of campaigns) {\n        const contacts = await storage.getContactsByCampaign(campaign.id);\n        const contactsWithCampaign = contacts.map(contact => ({\n          ...contact,\n          campaignName: campaign.name,\n          campaignStatus: campaign.status\n        }));\n        allContacts.push(...contactsWithCampaign);\n      }\n      res.json(allContacts);\n    } catch (error: any) {\n      console.error(\"Error getting contacts:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/campaigns\", upload.single('contactsFile'), async (req, res) => {\n    try {\n      // Convert messageInterval to number before validation\n      const processedBody = {\n        ...req.body,\n        messageInterval: parseInt(req.body.messageInterval) || 5\n      };\n      \n      const validation = insertCampaignSchema.safeParse(processedBody);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: fromZodError(validation.error).toString()\n        });\n      }\n\n      const campaignData = validation.data;\n      \n      // Create campaign\n      const campaign = await storage.createCampaign(campaignData);\n\n      // Process uploaded contacts file if provided\n      let contacts: any[] = [];\n      if (req.file) {\n        const fileValidation = ExcelService.validateExcelFile(req.file);\n        if (!fileValidation.valid) {\n          return res.status(400).json({ message: fileValidation.error });\n        }\n\n        const excelResult = await ExcelService.processExcelFile(req.file.buffer);\n        if (!excelResult.success) {\n          return res.status(400).json({ \n            message: \"Erro ao processar arquivo Excel\",\n            errors: excelResult.errors\n          });\n        }\n\n        // Create contacts in database\n        const contactsToInsert = excelResult.contacts.map(contact => ({\n          campaignId: campaign.id,\n          name: contact.name,\n          phone: contact.phone,\n          customFields: contact.customFields ? JSON.stringify(contact.customFields) : null,\n          status: 'pending' as const\n        }));\n\n        contacts = await storage.createMultipleContacts(contactsToInsert);\n\n        // Update campaign with total contacts\n        await storage.updateCampaign(campaign.id, {\n          totalContacts: contacts.length\n        });\n\n        await storage.createActivityLog({\n          type: 'file_processed',\n          message: `Arquivo ${req.file.originalname} processado com sucesso`,\n          metadata: JSON.stringify({ \n            campaignId: campaign.id,\n            contactsImported: contacts.length,\n            errors: excelResult.errors\n          })\n        });\n      }\n\n      res.json({ campaign, contactsImported: contacts.length });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/campaigns/:id/start\", async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.getCampaign(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campanha não encontrada\" });\n      }\n\n      if (!whatsappService.isConnected()) {\n        return res.status(400).json({ message: \"WhatsApp não está conectado\" });\n      }\n\n      // Update campaign status\n      await storage.updateCampaign(campaignId, { status: 'active' });\n\n      // Start sending messages in background\n      processCampaign(campaignId);\n\n      await storage.createActivityLog({\n        type: 'campaign_started',\n        message: `Campanha \"${campaign.name}\" iniciada`,\n        metadata: JSON.stringify({ campaignId })\n      });\n\n      broadcast({ type: 'campaign_started', data: { campaignId, name: campaign.name } });\n\n      res.json({ message: \"Campanha iniciada com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/campaigns/:id/pause\", async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.updateCampaign(campaignId, { status: 'paused' });\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campanha não encontrada\" });\n      }\n\n      await storage.createActivityLog({\n        type: 'campaign_paused',\n        message: `Campanha \"${campaign.name}\" pausada`,\n        metadata: JSON.stringify({ campaignId })\n      });\n\n      broadcast({ type: 'campaign_paused', data: { campaignId, name: campaign.name } });\n\n      res.json({ message: \"Campanha pausada com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/campaigns/:id/stop\", async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.updateCampaign(campaignId, { status: 'stopped' });\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campanha não encontrada\" });\n      }\n\n      await storage.createActivityLog({\n        type: 'campaign_stopped',\n        message: `Campanha \"${campaign.name}\" interrompida`,\n        metadata: JSON.stringify({ campaignId })\n      });\n\n      broadcast({ type: 'campaign_stopped', data: { campaignId, name: campaign.name } });\n\n      res.json({ message: \"Campanha interrompida com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/campaigns/:id\", async (req, res) => {\n    try {\n      const campaignId = req.params.id;\n      const campaign = await storage.getCampaign(campaignId);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campanha não encontrada\" });\n      }\n\n      // Delete all contacts associated with the campaign\n      await storage.deleteContactsByCampaign(campaignId);\n      \n      // Delete the campaign\n      await storage.deleteCampaign(campaignId);\n\n      await storage.createActivityLog({\n        type: 'campaign_deleted',\n        message: `Campanha \"${campaign.name}\" e seus contatos foram excluídos`,\n        metadata: JSON.stringify({ campaignId, campaignName: campaign.name })\n      });\n\n      broadcast({ type: 'campaign_deleted', data: { campaignId, name: campaign.name } });\n\n      res.json({ message: \"Campanha e contatos excluídos com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Activity Logs Routes\n  app.get(\"/api/activity-logs\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const logs = await storage.getActivityLogs(limit);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/activity-logs\", async (req, res) => {\n    try {\n      await storage.clearActivityLogs();\n      res.json({ message: \"Log de atividades limpo com sucesso\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stats Routes\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const campaigns = await storage.getAllCampaigns();\n      const activeCampaigns = campaigns.filter(c => c.status === 'active');\n      \n      const totalMessagesSent = campaigns.reduce((sum, campaign) => sum + campaign.sentCount, 0);\n      const totalContacts = campaigns.reduce((sum, campaign) => sum + campaign.totalContacts, 0);\n      const totalDelivered = campaigns.reduce((sum, campaign) => sum + campaign.deliveredCount, 0);\n      \n      const deliveryRate = totalMessagesSent > 0 ? (totalDelivered / totalMessagesSent) * 100 : 0;\n\n      res.json({\n        activeCampaigns: activeCampaigns.length,\n        messagesSent: totalMessagesSent,\n        deliveryRate: deliveryRate.toFixed(1),\n        contactsImported: totalContacts\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Campaign processing function\n  async function processCampaign(campaignId: string) {\n    const campaign = await storage.getCampaign(campaignId);\n    if (!campaign || campaign.status !== 'active') return;\n\n    const contacts = await storage.getContactsByCampaign(campaignId);\n    const pendingContacts = contacts.filter(contact => contact.status === 'pending');\n\n    for (const contact of pendingContacts) {\n      // Check if campaign is still active\n      const currentCampaign = await storage.getCampaign(campaignId);\n      if (!currentCampaign || currentCampaign.status !== 'active') {\n        break;\n      }\n\n      try {\n        // Replace template variables in message\n        let message = campaign.message;\n        message = message.replace(/{nome}/g, contact.name);\n        message = message.replace(/{telefone}/g, contact.phone);\n        \n        if (contact.customFields) {\n          Object.entries(contact.customFields).forEach(([key, value]) => {\n            message = message.replace(new RegExp(`{${key}}`, 'g'), String(value));\n          });\n        }\n\n        // Send message\n        const result = await whatsappService.sendMessage(contact.phone, message);\n\n        if (result.success) {\n          await storage.updateContact(contact.id, {\n            status: 'sent',\n            sentAt: new Date().toISOString()\n          });\n\n          await storage.updateCampaign(campaignId, {\n            sentCount: currentCampaign.sentCount + 1\n          });\n\n          broadcast({\n            type: 'campaign_progress',\n            data: {\n              campaignId,\n              contactId: contact.id,\n              status: 'sent',\n              progress: ((currentCampaign.sentCount + 1) / contacts.length) * 100\n            }\n          });\n        } else {\n          await storage.updateContact(contact.id, {\n            status: 'failed',\n            errorMessage: result.error\n          });\n\n          await storage.updateCampaign(campaignId, {\n            failedCount: currentCampaign.failedCount + 1\n          });\n\n          broadcast({\n            type: 'campaign_progress',\n            data: {\n              campaignId,\n              contactId: contact.id,\n              status: 'failed',\n              error: result.error\n            }\n          });\n        }\n\n        // Wait for the configured interval before next message\n        await new Promise(resolve => setTimeout(resolve, campaign.messageInterval * 1000));\n\n      } catch (error: any) {\n        console.error('Error processing contact:', error);\n        await storage.updateContact(contact.id, {\n          status: 'failed',\n          errorMessage: error.message\n        });\n      }\n    }\n\n    // Mark campaign as completed if all contacts processed\n    const finalContacts = await storage.getContactsByCampaign(campaignId);\n    const remainingPending = finalContacts.filter(contact => contact.status === 'pending');\n    \n    if (remainingPending.length === 0) {\n      await storage.updateCampaign(campaignId, { status: 'completed' });\n      \n      await storage.createActivityLog({\n        type: 'campaign_completed',\n        message: `Campanha \"${campaign.name}\" concluída`,\n        metadata: JSON.stringify({ campaignId })\n      });\n\n      broadcast({ type: 'campaign_completed', data: { campaignId, name: campaign.name } });\n    }\n  }\n\n  // Setup WhatsApp event listeners\n  whatsappService.on('qrcode', (data) => {\n    broadcast({ type: 'qrcode', data });\n  });\n\n  whatsappService.on('connected', (data) => {\n    broadcast({ type: 'whatsapp_connected', data });\n  });\n\n  whatsappService.on('disconnected', (data) => {\n    broadcast({ type: 'whatsapp_disconnected', data });\n  });\n\n  whatsappService.on('status', (data) => {\n    broadcast({ type: 'whatsapp_status', data });\n  });\n\n  return httpServer;\n}\n","size_bytes":17407},"server/storage.ts":{"content":"import { type WhatsappSession, type InsertWhatsappSession, type Campaign, type InsertCampaign, type Contact, type InsertContact, type ActivityLog, type InsertActivityLog } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // WhatsApp Sessions\n  getWhatsappSession(sessionName: string): Promise<WhatsappSession | undefined>;\n  createWhatsappSession(session: InsertWhatsappSession): Promise<WhatsappSession>;\n  updateWhatsappSession(sessionName: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined>;\n  getAllWhatsappSessions(): Promise<WhatsappSession[]>;\n\n  // Campaigns\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined>;\n  getAllCampaigns(): Promise<Campaign[]>;\n  getActiveCampaigns(): Promise<Campaign[]>;\n\n  // Contacts\n  getContact(id: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, updates: Partial<Contact>): Promise<Contact | undefined>;\n  getContactsByCampaign(campaignId: string): Promise<Contact[]>;\n  createMultipleContacts(contacts: InsertContact[]): Promise<Contact[]>;\n  deleteContact(id: string): Promise<void>;\n  deleteContactsByCampaign(campaignId: string): Promise<void>;\n\n  // Campaign Management\n  deleteCampaign(id: string): Promise<void>;\n\n  // Activity Logs\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  clearActivityLogs(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private whatsappSessions: Map<string, WhatsappSession>;\n  private campaigns: Map<string, Campaign>;\n  private contacts: Map<string, Contact>;\n  private activityLogs: ActivityLog[];\n\n  constructor() {\n    this.whatsappSessions = new Map();\n    this.campaigns = new Map();\n    this.contacts = new Map();\n    this.activityLogs = [];\n  }\n\n  // WhatsApp Sessions\n  async getWhatsappSession(sessionName: string): Promise<WhatsappSession | undefined> {\n    return Array.from(this.whatsappSessions.values()).find(session => session.sessionName === sessionName);\n  }\n\n  async createWhatsappSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    const id = randomUUID();\n    const session: WhatsappSession = {\n      ...insertSession,\n      id,\n      status: insertSession.status || 'disconnected',\n      deviceName: insertSession.deviceName || null,\n      lastActivity: insertSession.lastActivity || null,\n      createdAt: new Date(),\n    };\n    this.whatsappSessions.set(id, session);\n    return session;\n  }\n\n  async updateWhatsappSession(sessionName: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined> {\n    const session = await this.getWhatsappSession(sessionName);\n    if (!session) return undefined;\n\n    const updatedSession = { ...session, ...updates };\n    this.whatsappSessions.set(session.id, updatedSession);\n    return updatedSession;\n  }\n\n  async getAllWhatsappSessions(): Promise<WhatsappSession[]> {\n    return Array.from(this.whatsappSessions.values());\n  }\n\n  // Campaigns\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    return this.campaigns.get(id);\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = {\n      ...insertCampaign,\n      id,\n      status: insertCampaign.status || 'draft',\n      messageInterval: insertCampaign.messageInterval || 3,\n      scheduledAt: insertCampaign.scheduledAt || null,\n      totalContacts: 0,\n      sentCount: 0,\n      deliveredCount: 0,\n      failedCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n\n    const updatedCampaign = { ...campaign, ...updates, updatedAt: new Date() };\n    this.campaigns.set(id, updatedCampaign);\n    return updatedCampaign;\n  }\n\n  async getAllCampaigns(): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getActiveCampaigns(): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).filter(campaign => \n      campaign.status === 'active'\n    );\n  }\n\n  // Contacts\n  async getContact(id: string): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = {\n      ...insertContact,\n      id,\n      status: insertContact.status || 'pending',\n      customFields: insertContact.customFields || null,\n      sentAt: null,\n      deliveredAt: null,\n      errorMessage: null,\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async updateContact(id: string, updates: Partial<Contact>): Promise<Contact | undefined> {\n    const contact = this.contacts.get(id);\n    if (!contact) return undefined;\n\n    const updatedContact = { ...contact, ...updates };\n    this.contacts.set(id, updatedContact);\n    return updatedContact;\n  }\n\n  async getContactsByCampaign(campaignId: string): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).filter(contact => \n      contact.campaignId === campaignId\n    );\n  }\n\n  async createMultipleContacts(insertContacts: InsertContact[]): Promise<Contact[]> {\n    const contacts: Contact[] = [];\n    for (const insertContact of insertContacts) {\n      const contact = await this.createContact(insertContact);\n      contacts.push(contact);\n    }\n    return contacts;\n  }\n\n  // Activity Logs\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const id = randomUUID();\n    const log: ActivityLog = {\n      ...insertLog,\n      id,\n      metadata: insertLog.metadata || null,\n      createdAt: new Date(),\n    };\n    this.activityLogs.unshift(log); // Add to beginning for newest first\n    \n    // Keep only last 1000 logs\n    if (this.activityLogs.length > 1000) {\n      this.activityLogs = this.activityLogs.slice(0, 1000);\n    }\n    \n    return log;\n  }\n\n  async getActivityLogs(limit: number = 50): Promise<ActivityLog[]> {\n    return this.activityLogs.slice(0, limit);\n  }\n\n  async clearActivityLogs(): Promise<void> {\n    this.activityLogs = [];\n  }\n}\n\nimport { SQLiteStorage } from \"./storage-sqlite.js\";\n\nexport const storage = new SQLiteStorage();\n","size_bytes":6728},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { sqliteTable, text, integer, blob } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const whatsappSessions = sqliteTable(\"whatsapp_sessions\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  sessionName: text(\"session_name\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"disconnected\"), // connected, disconnected, connecting\n  deviceName: text(\"device_name\"),\n  lastActivity: text(\"last_activity\"), // ISO string\n  createdAt: text(\"created_at\").$default(() => new Date().toISOString()),\n});\n\nexport const campaigns = sqliteTable(\"campaigns\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  name: text(\"name\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, active, paused, completed, stopped\n  messageInterval: integer(\"message_interval\").notNull().default(5), // seconds\n  scheduleType: text(\"schedule_type\").notNull().default(\"now\"), // now, schedule\n  scheduledAt: text(\"scheduled_at\"), // ISO string\n  totalContacts: integer(\"total_contacts\").notNull().default(0),\n  sentCount: integer(\"sent_count\").notNull().default(0),\n  deliveredCount: integer(\"delivered_count\").notNull().default(0),\n  failedCount: integer(\"failed_count\").notNull().default(0),\n  createdAt: text(\"created_at\").$default(() => new Date().toISOString()),\n  updatedAt: text(\"updated_at\").$default(() => new Date().toISOString()),\n});\n\nexport const contacts = sqliteTable(\"contacts\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  campaignId: text(\"campaign_id\").references(() => campaigns.id).notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  customFields: text(\"custom_fields\"), // JSON string for template variables like {empresa}\n  status: text(\"status\").notNull().default(\"pending\"), // pending, sent, delivered, failed\n  sentAt: text(\"sent_at\"), // ISO string\n  deliveredAt: text(\"delivered_at\"), // ISO string\n  errorMessage: text(\"error_message\"),\n});\n\nexport const activityLogs = sqliteTable(\"activity_logs\", {\n  id: text(\"id\").primaryKey().$default(() => crypto.randomUUID()),\n  type: text(\"type\").notNull(), // message_sent, message_delivered, message_failed, campaign_started, etc.\n  message: text(\"message\").notNull(),\n  metadata: text(\"metadata\"), // JSON string\n  createdAt: text(\"created_at\").$default(() => new Date().toISOString()),\n});\n\n// Insert schemas\nexport const insertWhatsappSessionSchema = createInsertSchema(whatsappSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  totalContacts: true,\n  sentCount: true,\n  deliveredCount: true,\n  failedCount: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  sentAt: true,\n  deliveredAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type WhatsappSession = typeof whatsappSessions.$inferSelect;\nexport type InsertWhatsappSession = z.infer<typeof insertWhatsappSessionSchema>;\n\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\n\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n","size_bytes":3646},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":714},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(140, 69%, 58%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* WhatsApp colors */\n  --whatsapp: hsl(140, 69%, 58%);\n  --whatsapp-dark: hsl(140, 84%, 39%);\n  --whatsapp-light: hsl(140, 69%, 95%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(140, 69%, 58%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-whatsapp {\n    color: hsl(var(--whatsapp));\n  }\n  \n  .bg-whatsapp {\n    background-color: hsl(var(--whatsapp));\n  }\n  \n  .bg-whatsapp-dark {\n    background-color: hsl(var(--whatsapp-dark));\n  }\n  \n  .hover\\:bg-whatsapp-dark:hover {\n    background-color: hsl(var(--whatsapp-dark));\n  }\n  \n  .bg-whatsapp-dark {\n    background-color: hsl(var(--whatsapp-dark));\n  }\n  \n  .bg-whatsapp-light {\n    background-color: hsl(var(--whatsapp-light));\n  }\n  \n  .border-whatsapp {\n    border-color: hsl(var(--whatsapp));\n  }\n  \n  .hover\\:bg-whatsapp-dark:hover {\n    background-color: hsl(var(--whatsapp-dark));\n  }\n  \n  .focus\\:ring-whatsapp:focus {\n    --tw-ring-color: hsl(var(--whatsapp));\n  }\n}\n","size_bytes":2582},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/excel.ts":{"content":"import * as XLSX from 'xlsx';\n\nexport interface ExcelContact {\n  name: string;\n  phone: string;\n  customFields?: Record<string, any>;\n}\n\nexport interface ExcelProcessResult {\n  success: boolean;\n  contacts: ExcelContact[];\n  errors: string[];\n  totalRows: number;\n  validRows: number;\n}\n\nexport class ExcelService {\n  static async processExcelFile(buffer: Buffer): Promise<ExcelProcessResult> {\n    const result: ExcelProcessResult = {\n      success: false,\n      contacts: [],\n      errors: [],\n      totalRows: 0,\n      validRows: 0,\n    };\n\n    try {\n      const workbook = XLSX.read(buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      \n      if (!sheetName) {\n        result.errors.push('Planilha não encontrada');\n        return result;\n      }\n\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n\n      if (jsonData.length === 0) {\n        result.errors.push('Planilha vazia');\n        return result;\n      }\n\n      // Get headers from first row\n      const headers = jsonData[0].map((header: any) => \n        String(header).toLowerCase().trim()\n      );\n\n      // Use specific columns: B for company name (index 1) and F for phone (index 5)\n      const nameIndex = 1; // Column B (0-indexed, so B = 1)\n      const phoneIndex = 5; // Column F (0-indexed, so F = 5)\n\n      // Check if the required columns exist in the data\n      if (jsonData[0].length <= nameIndex) {\n        result.errors.push('Coluna B (nome da empresa) não encontrada na planilha');\n        return result;\n      }\n\n      if (jsonData[0].length <= phoneIndex) {\n        result.errors.push('Coluna F (telefone) não encontrada na planilha');\n        return result;\n      }\n\n      // Process data rows (skip header)\n      const dataRows = jsonData.slice(1);\n      result.totalRows = dataRows.length;\n\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i];\n        const rowNumber = i + 2; // +2 because we skip header and arrays are 0-indexed\n\n        try {\n          const name = this.extractCellValue(row[nameIndex]);\n          const phone = this.extractCellValue(row[phoneIndex]);\n\n          if (!name) {\n            result.errors.push(`Linha ${rowNumber}: Nome vazio`);\n            continue;\n          }\n\n          if (!phone) {\n            result.errors.push(`Linha ${rowNumber}: Telefone vazio`);\n            continue;\n          }\n\n          const cleanPhone = this.cleanPhoneNumber(phone);\n          if (!this.isValidPhoneNumber(cleanPhone)) {\n            result.errors.push(`Linha ${rowNumber}: Telefone inválido (${phone})`);\n            continue;\n          }\n\n          // Extract custom fields from other columns\n          const customFields: Record<string, any> = {};\n          headers.forEach((header, index) => {\n            if (index !== nameIndex && index !== phoneIndex && row[index]) {\n              customFields[header] = this.extractCellValue(row[index]);\n            }\n          });\n\n          const contact: ExcelContact = {\n            name: name.trim(),\n            phone: cleanPhone,\n            customFields: Object.keys(customFields).length > 0 ? customFields : undefined,\n          };\n\n          result.contacts.push(contact);\n          result.validRows++;\n\n        } catch (error: any) {\n          result.errors.push(`Linha ${rowNumber}: Erro ao processar (${error.message})`);\n        }\n      }\n\n      result.success = result.contacts.length > 0;\n\n      if (result.contacts.length === 0) {\n        result.errors.push('Nenhum contato válido encontrado na planilha');\n      }\n\n    } catch (error: any) {\n      result.errors.push(`Erro ao processar arquivo: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  private static findColumnIndex(headers: string[], possibleNames: string[]): number {\n    for (const name of possibleNames) {\n      const index = headers.findIndex(header => \n        header.includes(name) || name.includes(header)\n      );\n      if (index !== -1) return index;\n    }\n    return -1;\n  }\n\n  private static extractCellValue(cell: any): string {\n    if (cell === null || cell === undefined) return '';\n    return String(cell).trim();\n  }\n\n  private static cleanPhoneNumber(phone: string): string {\n    // Remove all non-numeric characters (parentheses, spaces, dashes, etc.)\n    let cleaned = phone.replace(/[^\\d]/g, '');\n    \n    // Handle Brazilian phone format like (11) 99761-3946\n    // Should result in: 5511997613946\n    \n    // If it starts with 0, remove it (some Brazilian numbers have leading 0)\n    if (cleaned.startsWith('0')) {\n      cleaned = cleaned.substring(1);\n    }\n    \n    // If it already has country code 55, keep as is\n    if (cleaned.startsWith('55') && cleaned.length >= 12) {\n      return cleaned;\n    }\n    \n    // Add Brazil country code if it's a valid Brazilian number\n    if (cleaned.length === 10 || cleaned.length === 11) {\n      cleaned = '55' + cleaned;\n    }\n    \n    return cleaned;\n  }\n\n  private static isValidPhoneNumber(phone: string): boolean {\n    // Brazilian phone number validation\n    // Should have 12 or 13 digits (55 + area code + number)\n    if (phone.length < 12 || phone.length > 13) return false;\n    \n    // Should start with 55 (Brazil)\n    if (!phone.startsWith('55')) return false;\n    \n    // Area code should be valid (11-99)\n    const areaCode = phone.substring(2, 4);\n    const areaCodeNum = parseInt(areaCode);\n    if (areaCodeNum < 11 || areaCodeNum > 99) return false;\n    \n    // The remaining digits should be the phone number (8 or 9 digits)\n    const phoneNumber = phone.substring(4);\n    if (phoneNumber.length < 8 || phoneNumber.length > 9) return false;\n    \n    return true;\n  }\n\n  static validateExcelFile(file: Express.Multer.File): { valid: boolean; error?: string } {\n    // Check file type\n    const allowedMimeTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n      'application/vnd.ms-excel', // .xls\n    ];\n\n    if (!allowedMimeTypes.includes(file.mimetype)) {\n      return { valid: false, error: 'Tipo de arquivo inválido. Use apenas arquivos Excel (.xlsx ou .xls)' };\n    }\n\n    // Check file size (10MB max)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      return { valid: false, error: 'Arquivo muito grande. Tamanho máximo: 10MB' };\n    }\n\n    return { valid: true };\n  }\n}\n","size_bytes":6414},"server/services/whatsapp.ts":{"content":"import { create, Whatsapp } from '@wppconnect-team/wppconnect';\nimport { EventEmitter } from 'events';\n\nexport interface WhatsappMessage {\n  to: string;\n  message: string;\n}\n\nexport interface WhatsappStatus {\n  isConnected: boolean;\n  sessionName: string;\n  deviceName?: string;\n  lastActivity?: Date;\n}\n\nexport class WhatsappService extends EventEmitter {\n  private client: Whatsapp | null = null;\n  private sessionName: string;\n  private isConnecting: boolean = false;\n\n  constructor(sessionName: string = 'session_001') {\n    super();\n    this.sessionName = sessionName;\n  }\n\n  async connect(): Promise<void> {\n    if (this.isConnecting || this.client) {\n      return;\n    }\n\n    this.isConnecting = true;\n    this.emit('status', { status: 'connecting', sessionName: this.sessionName });\n\n    try {\n      this.client = await create(\n        this.sessionName,\n        (base64Qr: string, asciiQR: string) => {\n          console.log('QR Code generated');\n          this.emit('qrcode', { qr: `${base64Qr}`, ascii: asciiQR });\n        },\n        (statusSession: string, session: string) => {\n          console.log('Status Session:', statusSession, 'Session:', session);\n          this.emit('status', { status: statusSession, sessionName: session });\n        },\n        undefined, // onLoadingScreen\n        undefined, // catchLinkCode\n        {\n          headless: true,\n          devtools: false,\n          useChrome: true,\n          debug: false,\n          logQR: false,\n          browserWS: '',\n          browserArgs: [\n            '--no-sandbox',\n            '--disable-setuid-sandbox',\n            '--disable-dev-shm-usage',\n            '--disable-accelerated-2d-canvas',\n            '--no-first-run',\n            '--no-zygote',\n            '--single-process',\n            '--disable-gpu'\n          ],\n        }\n      );\n\n      if (this.client) {\n        await this.setupEventListeners();\n        this.emit('connected', { sessionName: this.sessionName });\n      }\n    } catch (error) {\n      console.error('Error connecting to WhatsApp:', error);\n      this.emit('error', error);\n    } finally {\n      this.isConnecting = false;\n    }\n  }\n\n  private async setupEventListeners(): Promise<void> {\n    if (!this.client) return;\n\n    this.client.onMessage((message: any) => {\n      this.emit('message', message);\n    });\n\n    this.client.onAck((ack: any) => {\n      this.emit('ack', ack);\n    });\n\n    this.client.onStateChange((state: any) => {\n      this.emit('stateChange', state);\n    });\n  }\n\n  async sendMessage(to: string, message: string): Promise<{ success: boolean; error?: string }> {\n    if (!this.client) {\n      return { success: false, error: 'WhatsApp not connected' };\n    }\n\n    try {\n      // Format phone number (remove special characters and add country code if needed)\n      const formattedNumber = this.formatPhoneNumber(to);\n      \n      await this.client.sendText(formattedNumber, message);\n      this.emit('messageSent', { to: formattedNumber, message });\n      \n      return { success: true };\n    } catch (error: any) {\n      console.error('Error sending message:', error);\n      this.emit('messageError', { to, message, error: error.message });\n      return { success: false, error: error.message };\n    }\n  }\n\n  private formatPhoneNumber(phone: string): string {\n    // Remove all non-numeric characters\n    let cleaned = phone.replace(/\\D/g, '');\n    \n    // If it starts with 0, remove it (some Brazilian numbers have leading 0)\n    if (cleaned.startsWith('0')) {\n      cleaned = cleaned.substring(1);\n    }\n    \n    // If it already has country code 55, keep as is\n    if (cleaned.startsWith('55') && cleaned.length >= 12) {\n      // Already formatted correctly\n    } else if (cleaned.length === 10 || cleaned.length === 11) {\n      // Add Brazil country code for valid Brazilian numbers\n      cleaned = '55' + cleaned;\n    } else if (cleaned.length === 8 || cleaned.length === 9) {\n      // Probably missing area code, this will fail validation\n      console.warn(`Phone number seems incomplete: ${phone} -> ${cleaned}`);\n    }\n    \n    // Validate the final format\n    if (cleaned.length < 12 || cleaned.length > 13 || !cleaned.startsWith('55')) {\n      console.warn(`Invalid phone number format: ${phone} -> ${cleaned}`);\n    }\n    \n    // Ensure it ends with @c.us for WhatsApp\n    return cleaned + '@c.us';\n  }\n\n  async getStatus(): Promise<WhatsappStatus> {\n    const isConnected = this.client !== null;\n    \n    return {\n      isConnected,\n      sessionName: this.sessionName,\n      deviceName: isConnected ? 'Chrome Desktop' : undefined,\n      lastActivity: isConnected ? new Date() : undefined,\n    };\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.client) {\n      try {\n        await this.client.close();\n      } catch (error) {\n        console.error('Error closing WhatsApp client:', error);\n      }\n      this.client = null;\n      this.emit('disconnected', { sessionName: this.sessionName });\n    }\n  }\n\n  isConnected(): boolean {\n    return this.client !== null;\n  }\n}\n\n// Singleton instance\nexport const whatsappService = new WhatsappService();\n","size_bytes":5100},"client/src/components/activity-log.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Trash2, Activity } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ActivityLogEntry {\n  id: string;\n  type: string;\n  message: string;\n  createdAt: string;\n  metadata?: any;\n}\n\nexport function ActivityLog() {\n  const { toast } = useToast();\n\n  const { data: logs, isLoading } = useQuery<ActivityLogEntry[]>({\n    queryKey: [\"/api/activity-logs\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const clearLogMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/activity-logs\"),\n    onSuccess: () => {\n      toast({\n        title: \"Log Limpo\",\n        description: \"Log de atividades foi limpo com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/activity-logs\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'message_sent':\n        return 'bg-green-500';\n      case 'message_delivered':\n        return 'bg-blue-500';\n      case 'message_failed':\n        return 'bg-red-500';\n      case 'campaign_started':\n        return 'bg-green-500';\n      case 'campaign_paused':\n        return 'bg-yellow-500';\n      case 'campaign_stopped':\n        return 'bg-red-500';\n      case 'campaign_completed':\n        return 'bg-blue-500';\n      case 'file_processed':\n        return 'bg-blue-500';\n      case 'connection':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'agora';\n    if (diffInMinutes < 60) return `há ${diffInMinutes}min`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `há ${diffInHours}h`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `há ${diffInDays}d`;\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center text-lg font-semibold text-gray-900\">\n            <Activity className=\"w-5 h-5 mr-2\" />\n            Log de Atividades\n          </CardTitle>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => clearLogMutation.mutate()}\n            disabled={clearLogMutation.isPending}\n          >\n            <Trash2 className=\"w-4 h-4 mr-1\" />\n            Limpar Log\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <ScrollArea className=\"h-64\">\n          {isLoading ? (\n            <p className=\"text-gray-500\">Carregando atividades...</p>\n          ) : !logs || logs.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">Nenhuma atividade registrada</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {logs.map((log) => (\n                <div key={log.id} className=\"flex items-start space-x-3\">\n                  <div className={`w-2 h-2 rounded-full mt-2 ${getActivityIcon(log.type)}`}></div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-gray-900 break-words\">{log.message}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {formatTimeAgo(log.createdAt)}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4138},"client/src/components/campaign-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileSpreadsheet, Upload, X, Play, Save, Settings } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst campaignSchema = z.object({\n  name: z.string().min(1, \"Nome da campanha é obrigatório\"),\n  message: z.string().min(1, \"Mensagem é obrigatória\"),\n  messageInterval: z.number(),\n  scheduleType: z.string(),\n  scheduledAt: z.string().optional(),\n});\n\ntype CampaignFormData = z.infer<typeof campaignSchema>;\n\nexport function CampaignForm() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [fileStats, setFileStats] = useState<{ contacts: number; size: string } | null>(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<CampaignFormData>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      name: \"\",\n      message: \"\",\n      messageInterval: 5,\n      scheduleType: \"now\",\n    },\n  });\n\n  const createCampaignMutation = useMutation({  \n    mutationFn: async (data: CampaignFormData & { file?: File; status?: string }) => {\n\n      console.log(\"Botão clicado para criar a campanha 🚀\");\n      \n      const formData = new FormData();\n      formData.append('name', data.name);\n      formData.append('message', data.message);\n      formData.append('messageInterval', '5');\n      formData.append('scheduleType', data.scheduleType);\n      formData.append('status', data.status || 'draft');\n      \n\n      if (data.scheduledAt) {\n        formData.append('scheduledAt', data.scheduledAt);\n      }\n      \n      if (data.file) {\n        formData.append('contactsFile', data.file);\n      }\n\n      const response = await fetch('/api/campaigns', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Erro ao criar campanha');\n      }\n\n      return response.json();\n    },\n    onSuccess: (result, variables) => {\n      const isDraft = variables.status === 'draft';\n      toast({\n        title: isDraft ? \"Rascunho Salvo\" : \"Campanha Criada\",\n        description: `${isDraft ? 'Rascunho salvo' : 'Campanha criada'} com ${result.contactsImported} contatos importados`,\n      });\n      form.reset();\n      setSelectedFile(null);\n      setFileStats(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao Criar Campanha\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type\n      const allowedTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-excel'\n      ];\n      \n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Tipo de Arquivo Inválido\",\n          description: \"Use apenas arquivos Excel (.xlsx ou .xls)\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Check file size (10MB max)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"Arquivo Muito Grande\",\n          description: \"Tamanho máximo: 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n      setFileStats({\n        contacts: 0, // We can't know without processing\n        size: `${(file.size / 1024).toFixed(0)}KB`\n      });\n    }\n  };\n\n  const removeFile = () => {\n    setSelectedFile(null);\n    setFileStats(null);\n    // Reset file input\n    const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  };\n\n  const onSubmit = (data: CampaignFormData) => {\n    console.log(\"Botão clicado para criar a campanha 🚀\");\n    createCampaignMutation.mutate({\n      ...data,\n      file: selectedFile || undefined,\n      status: 'active',\n    });\n  };\n\n  const onSaveDraft = () => {\n    console.log(\"Salvando rascunho da campanha 📝\");\n    const data = form.getValues();\n    \n    // Validate required fields for draft\n    if (!data.name?.trim()) {\n      toast({\n        title: \"Campo obrigatório\",\n        description: \"Nome da campanha é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!data.message?.trim()) {\n      toast({\n        title: \"Campo obrigatório\", \n        description: \"Mensagem é obrigatória\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createCampaignMutation.mutate({\n      ...data,\n      file: selectedFile || undefined,\n      status: 'draft',\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Criar Nova Campanha\n          </CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowAdvanced(!showAdvanced)}\n          >\n            <Settings className=\"w-4 h-4 mr-1\" />\n            Avançado\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Campaign Name */}\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nome da Campanha</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: Promoção Black Friday 2024\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Message Content */}\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Mensagem</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      rows={4}\n                      placeholder=\"Digite sua mensagem aqui...\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Você pode usar variáveis: {\"{nome}\"}, {\"{telefone}\"}, {\"{empresa}\"}\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* File Upload */}\n            <div>\n              <FormLabel>Lista de Contatos (Excel)</FormLabel>\n              <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-gray-400 transition-colors\">\n                <div className=\"space-y-1 text-center\">\n                  <div className=\"mx-auto h-12 w-12 text-gray-400\">\n                    <FileSpreadsheet className=\"w-12 h-12\" />\n                  </div>\n                  <div className=\"flex text-sm text-gray-600\">\n                    <label className=\"relative cursor-pointer bg-white rounded-md font-medium text-whatsapp hover:text-whatsapp-dark\">\n                      <span>Enviar arquivo</span>\n                      <input \n                        type=\"file\" \n                        className=\"sr-only\" \n                        accept=\".xlsx,.xls\"\n                        onChange={handleFileChange}\n                      />\n                    </label>\n                    <p className=\"pl-1\">ou arraste e solte</p>\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Arquivos Excel até 10MB</p>\n                </div>\n              </div>\n              \n              {/* File Preview */}\n              {selectedFile && (\n                <div className=\"mt-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <FileSpreadsheet className=\"w-5 h-5 text-green-600\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {selectedFile.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {fileStats?.size}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={removeFile}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Hidden fields with default values */}\n            <input type=\"hidden\" {...form.register('messageInterval')} />\n            <input type=\"hidden\" {...form.register('scheduleType')} />\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4 pt-4\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-whatsapp hover:bg-whatsapp-dark text-white font-medium\"\n                disabled={createCampaignMutation.isPending}\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                {createCampaignMutation.isPending ? 'Criando Campanha...' : 'Iniciar Campanha'}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                className=\"font-medium\"\n                disabled={createCampaignMutation.isPending}\n                onClick={onSaveDraft}\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Salvar Rascunho\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10965},"client/src/components/campaign-progress.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Play, Pause, Square, Trash2, MoreHorizontal } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Campaign {\n  id: string;\n  name: string;\n  status: string;\n  sentCount: number;\n  deliveredCount: number;\n  failedCount: number;\n  totalContacts: number;\n  contacts: number;\n  progress: number;\n}\n\nexport function CampaignProgress() {\n  const { toast } = useToast();\n\n  const { data: campaigns, isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns/active\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  const pauseCampaignMutation = useMutation({\n    mutationFn: (campaignId: string) => apiRequest(\"POST\", `/api/campaigns/${campaignId}/pause`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns/active\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resumeCampaignMutation = useMutation({\n    mutationFn: (campaignId: string) => apiRequest(\"POST\", `/api/campaigns/${campaignId}/start`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns/active\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopCampaignMutation = useMutation({\n    mutationFn: (campaignId: string) => apiRequest(\"POST\", `/api/campaigns/${campaignId}/stop`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns/active\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCampaignMutation = useMutation({\n    mutationFn: (campaignId: string) => apiRequest(\"DELETE\", `/api/campaigns/${campaignId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns/active\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Campanha Excluída\",\n        description: \"Campanha e todos os contatos foram removidos com sucesso\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge className=\"bg-green-100 text-green-700\">Enviando</Badge>;\n      case 'draft':\n        return <Badge className=\"bg-gray-100 text-gray-700\">Rascunho</Badge>;\n      case 'paused':\n        return <Badge variant=\"secondary\">Pausada</Badge>;\n      case 'completed':\n        return <Badge className=\"bg-blue-100 text-blue-700\">Concluída</Badge>;\n      case 'stopped':\n        return <Badge variant=\"destructive\">Interrompida</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500 animate-pulse';\n      case 'draft':\n        return 'bg-gray-400';\n      case 'paused':\n        return 'bg-yellow-500';\n      case 'completed':\n        return 'bg-blue-500';\n      case 'stopped':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getProgressColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-whatsapp';\n      case 'draft':\n        return 'bg-gray-400';\n      case 'paused':\n        return 'bg-yellow-500';\n      case 'completed':\n        return 'bg-blue-500';\n      case 'stopped':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Campanhas em Andamento</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-gray-500\">Carregando campanhas...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Campanhas em Andamento\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => {\n                campaigns?.forEach(campaign => {\n                  if (campaign.status === 'active') {\n                    pauseCampaignMutation.mutate(campaign.id);\n                  }\n                });\n              }}\n            >\n              <Pause className=\"w-4 h-4 mr-1\" />\n              Pausar Todas\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => {\n                campaigns?.forEach(campaign => {\n                  if (campaign.status === 'active' || campaign.status === 'paused') {\n                    stopCampaignMutation.mutate(campaign.id);\n                  }\n                });\n              }}\n            >\n              <Square className=\"w-4 h-4 mr-1\" />\n              Parar Todas\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {!campaigns || campaigns.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Nenhuma campanha ativa no momento</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {campaigns.map((campaign) => (\n              <div key={campaign.id} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-3 h-3 rounded-full ${getStatusColor(campaign.status)}`}></div>\n                    <h4 className=\"font-medium text-gray-900\">{campaign.name}</h4>\n                    {getStatusBadge(campaign.status)}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {campaign.status === 'draft' ? (\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        onClick={() => resumeCampaignMutation.mutate(campaign.id)}\n                        disabled={resumeCampaignMutation.isPending}\n                        data-testid={`button-start-${campaign.id}`}\n                      >\n                        <Play className=\"w-4 h-4 mr-1\" />\n                        Iniciar Campanha\n                      </Button>\n                    ) : campaign.status === 'paused' ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => resumeCampaignMutation.mutate(campaign.id)}\n                        disabled={resumeCampaignMutation.isPending}\n                      >\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                    ) : campaign.status === 'active' ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => pauseCampaignMutation.mutate(campaign.id)}\n                        disabled={pauseCampaignMutation.isPending}\n                      >\n                        <Pause className=\"w-4 h-4\" />\n                      </Button>\n                    ) : null}\n                    \n                    {(campaign.status === 'active' || campaign.status === 'paused') && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => stopCampaignMutation.mutate(campaign.id)}\n                        disabled={stopCampaignMutation.isPending}\n                      >\n                        <Square className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      onClick={() => {\n                        if (window.confirm(`Tem certeza que deseja excluir a campanha \"${campaign.name}\" e todos os seus contatos?`)) {\n                          deleteCampaignMutation.mutate(campaign.id);\n                        }\n                      }}\n                      disabled={deleteCampaignMutation.isPending}\n                      data-testid={`button-delete-${campaign.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"mb-3\">\n                  <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\n                    <span>\n                      {campaign.sentCount} de {campaign.totalContacts} enviadas\n                    </span>\n                    <span>{campaign.progress.toFixed(1)}%</span>\n                  </div>\n                  <Progress \n                    value={campaign.progress} \n                    className=\"h-2\"\n                  />\n                </div>\n\n                {/* Campaign Stats */}\n                <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-500\">Enviadas</p>\n                    <p className=\"font-semibold text-green-600\">{campaign.sentCount}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-500\">Entregues</p>\n                    <p className=\"font-semibold text-blue-600\">{campaign.deliveredCount}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-500\">Falharam</p>\n                    <p className=\"font-semibold text-red-600\">{campaign.failedCount}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-500\">Pendentes</p>\n                    <p className=\"font-semibold text-gray-600\">\n                      {campaign.totalContacts - campaign.sentCount}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11227},"client/src/components/connection-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Power, RefreshCw, Wifi, WifiOff } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { QRCodeModal } from \"./qr-code-modal\";\n\nexport function ConnectionPanel() {\n  const { toast } = useToast();\n  const { qrCode, connectionStatus } = useWebSocket();\n  const [showQRModal, setShowQRModal] = useState(false);\n\n  const { data: status, isLoading } = useQuery<{\n    isConnected: boolean;\n    sessionName: string;\n    deviceName?: string;\n    session?: {\n      id: string;\n      sessionName: string;\n      status: string;\n      deviceName: string | null;\n      lastActivity: string | null;\n      createdAt: string | null;\n    } | null;\n  }>({\n    queryKey: [\"/api/whatsapp/status\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  const connectMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/whatsapp/connect\"),\n    onSuccess: () => {\n      setShowQRModal(true);\n      toast({\n        title: \"Conexão Iniciada\",\n        description: \"Processo de conexão com WhatsApp iniciado\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro na Conexão\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const disconnectMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/whatsapp/disconnect\"),\n    onSuccess: () => {\n      toast({\n        title: \"Desconectado\",\n        description: \"WhatsApp desconectado com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao Desconectar\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: () => queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/status\"] }),\n    onSuccess: () => {\n      toast({\n        title: \"Status Atualizado\",\n        description: \"Status da conexão foi atualizado\",\n      });\n    },\n  });\n\n  const formatLastActivity = (lastActivity: string | null) => {\n    if (!lastActivity) return \"Nunca\";\n    \n    const now = new Date();\n    const activity = new Date(lastActivity);\n    const diffInMinutes = Math.floor((now.getTime() - activity.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Agora\";\n    if (diffInMinutes < 60) return `há ${diffInMinutes}min`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `há ${diffInHours}h ${diffInMinutes % 60}min`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `há ${diffInDays}d`;\n  };\n\n  return (\n    <Card className=\"h-fit\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <CardTitle className=\"flex items-center text-lg font-semibold text-gray-900\">\n          <MessageSquare className=\"text-whatsapp mr-2\" />\n          Conexão WhatsApp\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {/* Connection Status */}\n        <div className=\"text-center mb-6\">\n          <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            {status?.isConnected ? (\n              <Wifi className=\"text-whatsapp text-3xl\" />\n            ) : (\n              <WifiOff className=\"text-gray-400 text-3xl\" />\n            )}\n          </div>\n          <div className=\"flex items-center justify-center space-x-2 mb-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              status?.isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'\n            }`}></div>\n            <Badge variant={status?.isConnected ? \"default\" : \"destructive\"}>\n              {status?.isConnected ? 'Online' : 'Offline'}\n            </Badge>\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            {status?.session?.lastActivity \n              ? `Conectado ${formatLastActivity(status.session.lastActivity)}`\n              : 'Não conectado'\n            }\n          </p>\n        </div>\n\n        {/* Session Info */}\n        {status?.session && (\n          <div className=\"space-y-3 mb-6\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Sessão:</span>\n              <span className=\"text-sm font-medium text-gray-900\">\n                {status.session.sessionName}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Dispositivo:</span>\n              <span className=\"text-sm font-medium text-gray-900\">\n                {status.deviceName || 'Chrome Desktop'}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Status:</span>\n              <Badge variant={status.session.status === 'connected' ? 'default' : 'secondary'}>\n                {status.session.status === 'connected' ? 'Conectado' : 'Desconectado'}\n              </Badge>\n            </div>\n          </div>\n        )}\n\n        {/* Connection Actions */}\n        <div className=\"space-y-3\">\n          {(status?.isConnected || status?.session?.status === 'connected') ? (\n            <Button\n              className=\"w-full bg-red-500 hover:bg-red-600 text-white\"\n              onClick={() => disconnectMutation.mutate()}\n              disabled={disconnectMutation.isPending}\n            >\n              <Power className=\"w-4 h-4 mr-2\" />\n              {disconnectMutation.isPending ? 'Desconectando...' : 'Desconectar'}\n            </Button>\n          ) : (\n            <Button\n              className=\"w-full text-white\"\n              style={{ backgroundColor: 'hsl(140, 69%, 58%)' }}\n              onClick={() => connectMutation.mutate()}\n              disabled={connectMutation.isPending}\n            >\n              <Power className=\"w-4 h-4 mr-2\" />\n              {connectMutation.isPending ? 'Conectando...' : 'Conectar'}\n            </Button>\n          )}\n          \n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => refreshMutation.mutate()}\n            disabled={refreshMutation.isPending || isLoading}\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n            Atualizar Status\n          </Button>\n        </div>\n      </CardContent>\n      \n      {/* QR Code Modal */}\n      <QRCodeModal\n        isOpen={showQRModal}\n        onClose={() => setShowQRModal(false)}\n        qrCodeData={qrCode || undefined}\n        connectionStatus={connectionStatus}\n      />\n    </Card>\n  );\n}\n","size_bytes":7194},"client/src/components/qr-code-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { QrCode, Smartphone, RefreshCw, X } from \"lucide-react\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\n\ninterface QRCodeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  qrCodeData?: string;\n  connectionStatus?: string;\n}\n\nexport function QRCodeModal({ isOpen, onClose, qrCodeData, connectionStatus }: QRCodeModalProps) {\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutos\n  const { whatsappStatus } = useWebSocket();\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const timer = setInterval(() => {\n      setTimeLeft((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isOpen]);\n\n  useEffect(() => {\n    // Reset timer when new QR code is received\n    if (qrCodeData) {\n      setTimeLeft(120);\n    }\n  }, [qrCodeData]);\n\n  // Close modal if connection is successful\n  useEffect(() => {\n    if (whatsappStatus?.isConnected) {\n      onClose();\n    }\n  }, [whatsappStatus?.isConnected, onClose]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connecting':\n        return 'bg-blue-100 text-blue-700';\n      case 'qrReadSuccess':\n        return 'bg-green-100 text-green-700';\n      case 'authenticated':\n        return 'bg-green-100 text-green-700';\n      case 'qrReadError':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'connecting':\n        return 'Conectando...';\n      case 'qrReadSuccess':\n        return 'QR Code lido com sucesso!';\n      case 'authenticated':\n        return 'Autenticado com sucesso!';\n      case 'qrReadError':\n        return 'Erro na leitura do QR Code';\n      case 'disconnected':\n        return 'Desconectado';\n      default:\n        return 'Aguardando conexão';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-2\">\n            <QrCode className=\"text-whatsapp\" />\n            <DialogTitle>Conectar WhatsApp</DialogTitle>\n          </div>\n          <DialogDescription>\n            Escaneie o QR Code com seu WhatsApp para conectar\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Status Badge */}\n          {connectionStatus && (\n            <div className=\"flex justify-center\">\n              <Badge className={getStatusColor(connectionStatus)}>\n                {getStatusText(connectionStatus)}\n              </Badge>\n            </div>\n          )}\n\n          {/* QR Code Display */}\n          <Card>\n            <CardContent className=\"p-6\">\n              {qrCodeData ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-center\">\n                    <div className=\"relative\">\n                      <img \n                        src={qrCodeData} \n                        alt=\"QR Code WhatsApp\" \n                        className=\"w-64 h-64 border-2 border-gray-200 rounded-lg\"\n                      />\n                      {timeLeft <= 0 && (\n                        <div className=\"absolute inset-0 bg-black bg-opacity-50 rounded-lg flex items-center justify-center\">\n                          <div className=\"text-white text-center\">\n                            <RefreshCw className=\"w-8 h-8 mx-auto mb-2\" />\n                            <p className=\"text-sm\">QR Code expirado</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Timer */}\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">\n                      QR Code expira em: <span className=\"font-mono font-semibold\">{formatTime(timeLeft)}</span>\n                    </p>\n                    <div className=\"w-full bg-gray-200 rounded-full h-1 mt-2\">\n                      <div \n                        className=\"bg-whatsapp h-1 rounded-full transition-all duration-1000\"\n                        style={{ width: `${(timeLeft / 120) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center py-12 text-gray-500\">\n                  <QrCode className=\"w-16 h-16 mb-4\" />\n                  <p className=\"text-center\">\n                    {connectionStatus === 'connecting' \n                      ? 'Gerando QR Code...' \n                      : 'Clique em \"Conectar\" para gerar o QR Code'\n                    }\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Instructions */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <Smartphone className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm text-blue-800\">\n                  <p className=\"font-medium mb-2\">Como conectar:</p>\n                  <ol className=\"list-decimal list-inside space-y-1 text-xs\">\n                    <li>Abra o WhatsApp no seu celular</li>\n                    <li>Toque em Mais opções (⋮) → Dispositivos conectados</li>\n                    <li>Toque em \"Conectar dispositivo\"</li>\n                    <li>Aponte a câmera para este QR Code</li>\n                  </ol>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={onClose}\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancelar\n            </Button>\n            {timeLeft <= 0 && (\n              <Button\n                className=\"flex-1 bg-whatsapp hover:bg-whatsapp-dark text-white\"\n                onClick={() => {\n                  setTimeLeft(120);\n                  // Trigger new QR code generation\n                  window.location.reload();\n                }}\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Novo QR Code\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7127},"client/src/components/stats-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, MessageSquare, CheckCircle, Users } from \"lucide-react\";\n\ninterface Stats {\n  activeCampaigns: number;\n  messagesSent: number;\n  deliveryRate: string;\n  contactsImported: number;\n}\n\ninterface StatsGridProps {\n  stats?: Stats;\n}\n\nexport function StatsGrid({ stats }: StatsGridProps) {\n  const defaultStats = {\n    activeCampaigns: 0,\n    messagesSent: 0,\n    deliveryRate: \"0.0\",\n    contactsImported: 0,\n  };\n\n  const currentStats = stats || defaultStats;\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n      <Card className=\"border border-gray-200 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Campanhas Ativas</p>\n              <p className=\"text-3xl font-semibold text-gray-900 mt-2\">\n                {currentStats.activeCampaigns}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"text-blue-600 text-xl\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">↗ Ativo</span>\n            <span className=\"text-gray-600 ml-2\">campanhas em execução</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border border-gray-200 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Mensagens Enviadas</p>\n              <p className=\"text-3xl font-semibold text-gray-900 mt-2\">\n                {currentStats.messagesSent.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <MessageSquare className=\"text-green-600 text-xl\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">↗ Total</span>\n            <span className=\"text-gray-600 ml-2\">mensagens processadas</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border border-gray-200 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Taxa de Entrega</p>\n              <p className=\"text-3xl font-semibold text-gray-900 mt-2\">\n                {currentStats.deliveryRate}%\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"text-yellow-600 text-xl\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">↗ Sucesso</span>\n            <span className=\"text-gray-600 ml-2\">na entrega</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border border-gray-200 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Contatos Importados</p>\n              <p className=\"text-3xl font-semibold text-gray-900 mt-2\">\n                {currentStats.contactsImported.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <Users className=\"text-purple-600 text-xl\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">↗ Disponível</span>\n            <span className=\"text-gray-600 ml-2\">para campanhas</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4171},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useState, useRef } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\ninterface WhatsappStatus {\n  isConnected: boolean;\n  sessionName: string;\n  deviceName?: string;\n  lastActivity?: Date;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [whatsappStatus, setWhatsappStatus] = useState<WhatsappStatus | null>(null);\n  const [qrCode, setQrCode] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<string>('');\n  const ws = useRef<WebSocket | null>(null);\n  const { toast } = useToast();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = () => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      \n      // Attempt to reconnect\n      if (reconnectAttempts.current < maxReconnectAttempts) {\n        reconnectAttempts.current++;\n        setTimeout(() => {\n          console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})`);\n          connect();\n        }, 2000 * reconnectAttempts.current);\n      }\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  };\n\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'whatsapp_connected':\n        setWhatsappStatus({\n          isConnected: true,\n          sessionName: message.data.sessionName,\n          deviceName: 'Chrome Desktop',\n          lastActivity: new Date()\n        });\n        setConnectionStatus('authenticated');\n        setQrCode(null);\n        toast({\n          title: \"WhatsApp Conectado\",\n          description: \"Conexão estabelecida com sucesso\",\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n        break;\n\n      case 'whatsapp_disconnected':\n        setWhatsappStatus(prev => prev ? { ...prev, isConnected: false } : null);\n        setConnectionStatus('disconnected');\n        setQrCode(null);\n        toast({\n          title: \"WhatsApp Desconectado\",\n          description: \"Conexão perdida\",\n          variant: \"destructive\",\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n        break;\n\n      case 'qrcode':\n        setQrCode(message.data.qr);\n        setConnectionStatus('qr_ready');\n        toast({\n          title: \"QR Code Gerado\",\n          description: \"Escaneie o QR Code no WhatsApp Web\",\n        });\n        break;\n\n      case 'message_sent':\n        toast({\n          title: \"Mensagem Enviada\",\n          description: `Mensagem enviada para ${message.data.to}`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/activity-logs'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      case 'message_error':\n        toast({\n          title: \"Erro no Envio\",\n          description: `Falha ao enviar mensagem para ${message.data.to}`,\n          variant: \"destructive\",\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/activity-logs'] });\n        break;\n\n      case 'campaign_started':\n        toast({\n          title: \"Campanha Iniciada\",\n          description: `Campanha \"${message.data.name}\" foi iniciada`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        break;\n\n      case 'campaign_paused':\n        toast({\n          title: \"Campanha Pausada\",\n          description: `Campanha \"${message.data.name}\" foi pausada`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        break;\n\n      case 'campaign_stopped':\n        toast({\n          title: \"Campanha Interrompida\",\n          description: `Campanha \"${message.data.name}\" foi interrompida`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        break;\n\n      case 'campaign_completed':\n        toast({\n          title: \"Campanha Concluída\",\n          description: `Campanha \"${message.data.name}\" foi concluída`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        break;\n\n      case 'campaign_progress':\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns/active'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      default:\n        console.log('Unknown WebSocket message type:', message.type);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    isConnected,\n    whatsappStatus,\n    qrCode,\n    connectionStatus,\n  };\n}\n","size_bytes":5753},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { ConnectionPanel } from \"@/components/connection-panel\";\nimport { CampaignForm } from \"@/components/campaign-form\";\nimport { CampaignProgress } from \"@/components/campaign-progress\";\nimport { ActivityLog } from \"@/components/activity-log\";\nimport { StatsGrid } from \"@/components/stats-grid\";\nimport { ContactsTable } from \"@/components/contacts-table\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageSquare, Plus, Home, Plug, Megaphone, Users, BarChart } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { isConnected, whatsappStatus } = useWebSocket();\n  const [activeSection, setActiveSection] = useState('dashboard');\n\n  const { data: stats } = useQuery<{\n    activeCampaigns: number;\n    messagesSent: number;\n    deliveryRate: string;\n    contactsImported: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg border-r border-gray-200\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-whatsapp rounded-lg flex items-center justify-center\">\n              <MessageSquare className=\"text-white text-xl\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-gray-900\">Campaign Manager</h1>\n              <p className=\"text-sm text-gray-500\">WhatsApp Automation</p>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"mt-6\">\n          <div className=\"px-4 space-y-2\">\n            <button \n              onClick={() => setActiveSection('dashboard')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg ${\n                activeSection === 'dashboard' \n                  ? 'text-whatsapp bg-green-50' \n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n              data-testid=\"button-nav-dashboard\"\n            >\n              <Home className=\"w-4 h-4 mr-3\" />\n              Dashboard\n            </button>\n            <button \n              onClick={() => setActiveSection('connections')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg ${\n                activeSection === 'connections' \n                  ? 'text-whatsapp bg-green-50' \n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n              data-testid=\"button-nav-connections\"\n            >\n              <Plug className=\"w-4 h-4 mr-3\" />\n              Conexões\n            </button>\n            <button \n              onClick={() => setActiveSection('campaigns')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg ${\n                activeSection === 'campaigns' \n                  ? 'text-whatsapp bg-green-50' \n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n              data-testid=\"button-nav-campaigns\"\n            >\n              <Megaphone className=\"w-4 h-4 mr-3\" />\n              Campanhas\n            </button>\n            <button \n              onClick={() => setActiveSection('contacts')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg ${\n                activeSection === 'contacts' \n                  ? 'text-whatsapp bg-green-50' \n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n              data-testid=\"button-nav-contacts\"\n            >\n              <Users className=\"w-4 h-4 mr-3\" />\n              Contatos\n            </button>\n            <button \n              onClick={() => setActiveSection('reports')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg ${\n                activeSection === 'reports' \n                  ? 'text-whatsapp bg-green-50' \n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n              data-testid=\"button-nav-reports\"\n            >\n              <BarChart className=\"w-4 h-4 mr-3\" />\n              Relatórios\n            </button>\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-gray-200\">\n          <div className=\"px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-gray-900\">\n                  {activeSection === 'dashboard' && 'Dashboard'}\n                  {activeSection === 'connections' && 'Conexões WhatsApp'}\n                  {activeSection === 'campaigns' && 'Campanhas'}\n                  {activeSection === 'contacts' && 'Contatos'}\n                  {activeSection === 'reports' && 'Relatórios'}\n                </h2>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {activeSection === 'dashboard' && 'Gerencie suas campanhas do WhatsApp'}\n                  {activeSection === 'connections' && 'Configure e monitore conexões do WhatsApp'}\n                  {activeSection === 'campaigns' && 'Crie e gerencie campanhas de mensagens'}\n                  {activeSection === 'contacts' && 'Visualize todos os contatos importados'}\n                  {activeSection === 'reports' && 'Estatísticas e relatórios de atividade'}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                {/* Connection Status */}\n                <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${\n                  whatsappStatus?.isConnected \n                    ? 'bg-green-50' \n                    : 'bg-red-50'\n                }`}>\n                  <div className={`w-3 h-3 rounded-full ${\n                    whatsappStatus?.isConnected \n                      ? 'bg-green-500 animate-pulse' \n                      : 'bg-red-500'\n                  }`}></div>\n                  <span className={`text-sm font-medium ${\n                    whatsappStatus?.isConnected \n                      ? 'text-green-700' \n                      : 'text-red-700'\n                  }`}>\n                    {whatsappStatus?.isConnected ? 'Conectado' : 'Desconectado'}\n                  </span>\n                </div>\n                <Button className=\"bg-whatsapp hover:bg-whatsapp-dark text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Nova Campanha\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Dashboard Content */}\n        <main className=\"p-6 overflow-y-auto\">\n          {activeSection === 'dashboard' && (\n            <>\n              {/* Statistics Cards */}\n              <StatsGrid stats={stats} />\n\n              {/* Main Content Grid */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8\">\n                {/* WhatsApp Connection Panel */}\n                <div className=\"lg:col-span-1\">\n                  <ConnectionPanel />\n                </div>\n\n                {/* Campaign Management */}\n                <div className=\"lg:col-span-2\">\n                  <CampaignForm />\n                </div>\n              </div>\n\n              {/* Active Campaigns and Progress */}\n              <div className=\"mt-8\">\n                <CampaignProgress />\n              </div>\n\n              {/* Recent Activity Log */}\n              <div className=\"mt-8\">\n                <ActivityLog />\n              </div>\n            </>\n          )}\n\n          {activeSection === 'connections' && (\n            <div className=\"space-y-6\">\n              <ConnectionPanel />\n            </div>\n          )}\n\n          {activeSection === 'campaigns' && (\n            <div className=\"space-y-6\">\n              <CampaignForm />\n              <CampaignProgress />\n            </div>\n          )}\n\n          {activeSection === 'contacts' && (\n            <div className=\"space-y-6\">\n              <ContactsTable />\n            </div>\n          )}\n\n          {activeSection === 'reports' && (\n            <div className=\"space-y-6\">\n              <StatsGrid stats={stats} />\n              <ActivityLog />\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst sidebarVariants = cva(\n  \"flex h-full w-full flex-col overflow-hidden rounded-md border bg-background text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"border\",\n        destructive:\n          \"border-destructive bg-destructive text-destructive-foreground\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-secondary bg-secondary text-secondary-foreground\",\n        ghost: \"border-transparent bg-transparent\",\n        link: \"border-transparent bg-transparent text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface SidebarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof sidebarVariants> {\n  asChild?: boolean\n}\n\nconst Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\"\n    return (\n      <Comp\n        className={cn(sidebarVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nexport { Sidebar, sidebarVariants }\n","size_bytes":1597},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport { migrate } from 'drizzle-orm/better-sqlite3/migrator';\nimport * as schema from '../shared/schema.js';\n\nconst sqlite = new Database('database.sqlite');\nexport const db = drizzle(sqlite, { schema });\n\n// Initialize database with tables\nexport function initializeDatabase() {\n  // Create tables if they don't exist\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS whatsapp_sessions (\n      id TEXT PRIMARY KEY,\n      session_name TEXT NOT NULL UNIQUE,\n      status TEXT NOT NULL DEFAULT 'disconnected',\n      device_name TEXT,\n      last_activity TEXT,\n      created_at TEXT NOT NULL\n    );\n\n    CREATE TABLE IF NOT EXISTS campaigns (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      message TEXT NOT NULL,\n      status TEXT NOT NULL DEFAULT 'draft',\n      message_interval INTEGER NOT NULL DEFAULT 5,\n      schedule_type TEXT NOT NULL DEFAULT 'now',\n      scheduled_at TEXT,\n      total_contacts INTEGER NOT NULL DEFAULT 0,\n      sent_count INTEGER NOT NULL DEFAULT 0,\n      delivered_count INTEGER NOT NULL DEFAULT 0,\n      failed_count INTEGER NOT NULL DEFAULT 0,\n      created_at TEXT NOT NULL,\n      updated_at TEXT NOT NULL\n    );\n\n    CREATE TABLE IF NOT EXISTS contacts (\n      id TEXT PRIMARY KEY,\n      campaign_id TEXT NOT NULL,\n      name TEXT NOT NULL,\n      phone TEXT NOT NULL,\n      custom_fields TEXT,\n      status TEXT NOT NULL DEFAULT 'pending',\n      sent_at TEXT,\n      delivered_at TEXT,\n      error_message TEXT,\n      FOREIGN KEY (campaign_id) REFERENCES campaigns (id)\n    );\n\n    CREATE TABLE IF NOT EXISTS activity_logs (\n      id TEXT PRIMARY KEY,\n      type TEXT NOT NULL,\n      message TEXT NOT NULL,\n      metadata TEXT,\n      created_at TEXT NOT NULL\n    );\n  `);\n}","size_bytes":1803},"server/storage-sqlite.ts":{"content":"import { eq, or } from 'drizzle-orm';\nimport { db, initializeDatabase } from './db.js';\nimport * as schema from '../shared/schema.js';\nimport type { IStorage } from './storage.js';\n\nexport class SQLiteStorage implements IStorage {\n  constructor() {\n    initializeDatabase();\n  }\n\n  // WhatsApp Sessions\n  async createWhatsappSession(sessionData: any) {\n    const id = crypto.randomUUID();\n    const session = {\n      id,\n      ...sessionData,\n      createdAt: new Date().toISOString(),\n    };\n    \n    await db.insert(schema.whatsappSessions).values(session);\n    return session;\n  }\n\n  async getWhatsappSession(sessionName: string) {\n    const result = await db.select()\n      .from(schema.whatsappSessions)\n      .where(eq(schema.whatsappSessions.sessionName, sessionName))\n      .limit(1);\n    \n    return result[0] || null;\n  }\n\n  async updateWhatsappSession(sessionName: string, updates: any) {\n    await db.update(schema.whatsappSessions)\n      .set(updates)\n      .where(eq(schema.whatsappSessions.sessionName, sessionName));\n    \n    // Return updated session\n    return await this.getWhatsappSession(sessionName);\n  }\n\n  // Campaigns\n  async createCampaign(campaignData: any) {\n    const id = crypto.randomUUID();\n    const now = new Date().toISOString();\n    const campaign = {\n      id,\n      ...campaignData,\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    await db.insert(schema.campaigns).values(campaign);\n    return campaign;\n  }\n\n  async getCampaign(id: string) {\n    const result = await db.select()\n      .from(schema.campaigns)\n      .where(eq(schema.campaigns.id, id))\n      .limit(1);\n    \n    return result[0] || null;\n  }\n\n  async getAllCampaigns() {\n    return await db.select().from(schema.campaigns);\n  }\n\n  async getActiveCampaigns() {\n    // Include draft campaigns as well since they are \"active\" in the sense of being available to work with\n    return await db.select().from(schema.campaigns);\n  }\n\n  async updateCampaign(id: string, updates: any) {\n    await db.update(schema.campaigns)\n      .set({ ...updates, updatedAt: new Date().toISOString() })\n      .where(eq(schema.campaigns.id, id));\n    \n    // Return updated campaign\n    return await this.getCampaign(id);\n  }\n\n  async deleteCampaign(id: string) {\n    await db.delete(schema.campaigns)\n      .where(eq(schema.campaigns.id, id));\n  }\n\n  // Contacts\n  async createContact(contactData: any) {\n    const id = crypto.randomUUID();\n    const contact = {\n      id,\n      ...contactData,\n      customFields: contactData.customFields ? JSON.stringify(contactData.customFields) : null,\n    };\n    \n    await db.insert(schema.contacts).values(contact);\n    return { ...contact, customFields: contactData.customFields };\n  }\n\n  async createMultipleContacts(contactsData: any[]) {\n    const contacts = contactsData.map(contactData => ({\n      id: crypto.randomUUID(),\n      ...contactData,\n      customFields: contactData.customFields ? JSON.stringify(contactData.customFields) : null,\n    }));\n    \n    await db.insert(schema.contacts).values(contacts);\n    return contacts.map((contact, index) => ({\n      ...contact,\n      customFields: contactsData[index].customFields,\n    }));\n  }\n\n  async getContact(id: string) {\n    const result = await db.select()\n      .from(schema.contacts)\n      .where(eq(schema.contacts.id, id))\n      .limit(1);\n    \n    if (!result[0]) return null;\n    \n    const contact = result[0];\n    return {\n      ...contact,\n      customFields: contact.customFields ? JSON.parse(contact.customFields) : null,\n    };\n  }\n\n  async getContactsByCampaign(campaignId: string) {\n    const results = await db.select()\n      .from(schema.contacts)\n      .where(eq(schema.contacts.campaignId, campaignId));\n    \n    return results.map(contact => ({\n      ...contact,\n      customFields: contact.customFields ? JSON.parse(contact.customFields) : null,\n    }));\n  }\n\n  async updateContact(id: string, updates: any) {\n    const updateData = { ...updates };\n    if (updateData.customFields) {\n      updateData.customFields = JSON.stringify(updateData.customFields);\n    }\n    \n    await db.update(schema.contacts)\n      .set(updateData)\n      .where(eq(schema.contacts.id, id));\n    \n    // Return updated contact\n    return await this.getContact(id);\n  }\n\n  async deleteContact(id: string) {\n    await db.delete(schema.contacts)\n      .where(eq(schema.contacts.id, id));\n  }\n\n  // Activity Logs\n  async createActivityLog(logData: any) {\n    const id = crypto.randomUUID();\n    const log = {\n      id,\n      ...logData,\n      metadata: typeof logData.metadata === 'string' ? logData.metadata : JSON.stringify(logData.metadata),\n      createdAt: new Date().toISOString(),\n    };\n    \n    await db.insert(schema.activityLogs).values(log);\n    return { ...log, metadata: typeof logData.metadata === 'string' ? JSON.parse(logData.metadata) : logData.metadata };\n  }\n\n  async getActivityLogs(limit = 50) {\n    const results = await db.select()\n      .from(schema.activityLogs)\n      .limit(limit);\n    \n    return results.map(log => ({\n      ...log,\n      metadata: log.metadata ? JSON.parse(log.metadata) : null,\n    }));\n  }\n\n  async clearActivityLogs(): Promise<void> {\n    await db.delete(schema.activityLogs);\n  }\n\n  async getAllWhatsappSessions() {\n    return await db.select().from(schema.whatsappSessions);\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    await db.delete(schema.campaigns)\n      .where(eq(schema.campaigns.id, id));\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    await db.delete(schema.contacts)\n      .where(eq(schema.contacts.id, id));\n  }\n\n  async deleteContactsByCampaign(campaignId: string): Promise<void> {\n    await db.delete(schema.contacts)\n      .where(eq(schema.contacts.campaignId, campaignId));\n  }\n}","size_bytes":5764},"client/src/components/contacts-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { Search, User, Phone, MessageSquare, Filter } from \"lucide-react\";\n\ninterface Contact {\n  id: string;\n  name: string;\n  phone: string;\n  status: 'pending' | 'sent' | 'delivered' | 'failed';\n  campaignName: string;\n  campaignStatus: string;\n  customFields?: Record<string, any>;\n  sentAt?: string;\n  errorMessage?: string;\n}\n\nexport function ContactsTable() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCampaign, setSelectedCampaign] = useState<string>(\"all\");\n\n  const { data: contacts = [], isLoading, error } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  console.log(\"Contacts data:\", contacts?.length, \"contacts loaded\");\n\n  // Get unique campaigns for the filter\n  const campaigns = Array.from(new Set(contacts.map(contact => contact.campaignName)));\n\n  const filteredContacts = contacts.filter(contact => {\n    const matchesSearch = contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.phone.includes(searchTerm) ||\n      contact.campaignName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesCampaign = selectedCampaign === \"all\" || contact.campaignName === selectedCampaign;\n    \n    return matchesSearch && matchesCampaign;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return 'bg-green-100 text-green-800';\n      case 'delivered':\n        return 'bg-blue-100 text-blue-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'sent':\n        return 'Enviado';\n      case 'delivered':\n        return 'Entregue';\n      case 'failed':\n        return 'Falhou';\n      default:\n        return 'Pendente';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <User className=\"w-5 h-5\" />\n            <span>Carregando Contatos...</span>\n          </CardTitle>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <User className=\"w-5 h-5\" />\n            <span>Contatos Importados ({filteredContacts.length} de {contacts.length})</span>\n          </CardTitle>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Buscar por nome, telefone ou campanha...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-contacts\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4 text-gray-400\" />\n            <Select value={selectedCampaign} onValueChange={setSelectedCampaign}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-campaign-filter\">\n                <SelectValue placeholder=\"Filtrar por campanha\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as campanhas</SelectItem>\n                {campaigns.map(campaign => (\n                  <SelectItem key={campaign} value={campaign}>\n                    {campaign}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {filteredContacts.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <User className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">\n              {searchTerm ? 'Nenhum contato encontrado para sua busca' : 'Nenhum contato importado ainda'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contato\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Telefone\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Campanha\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredContacts.map((contact) => (\n                  <tr key={contact.id} data-testid={`row-contact-${contact.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                          <User className=\"w-4 h-4 text-gray-500\" />\n                        </div>\n                        <div className=\"ml-3\">\n                          <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-name-${contact.id}`}>\n                            {contact.name}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Phone className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm text-gray-900\" data-testid={`text-phone-${contact.id}`}>\n                          {contact.phone}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center space-x-2\">\n                        <MessageSquare className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm text-gray-900\" data-testid={`text-campaign-${contact.id}`}>\n                          {contact.campaignName}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge \n                        className={`${getStatusColor(contact.status)} border-0 text-xs`}\n                        data-testid={`badge-status-${contact.id}`}\n                      >\n                        {getStatusText(contact.status)}\n                      </Badge>\n                      {contact.errorMessage && (\n                        <p className=\"text-xs text-red-600 mt-1 max-w-xs truncate\" title={contact.errorMessage}>\n                          {contact.errorMessage}\n                        </p>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8027}}}